// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?

  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  User      User[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String

  createdById String?
  createdBy   User?   @relation(name: "Creator", fields: [createdById], references: [id])

  accounts Account[]
  sessions Session[]

  roleId String?
  role   Role?   @relation(fields: [roleId], references: [id])

  carWashId String?
  carWash   CarWash? @relation("userToCarWash", fields: [carWashId], references: [id])

  User    User[]    @relation("Creator")
  CarWash CarWash[] @relation("CarWashCreator")
  staff   Staff[]   @relation("staffCreator")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Menu {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  url       String    @unique
  icon      String    @unique
  listOrder Int       @unique
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Designation {
  id String @id @default(cuid())

  name        String @unique
  description String

  carWashId String
  carWash   CarWash @relation(fields: [carWashId], references: [id])

  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  Staff Staff[]
}

model Town {
  id   String @id @default(cuid())
  name String @unique

  constituencies Constituency[]
}

model Constituency {
  id   String @id @default(cuid())
  name String @unique

  areas Area[]

  town   Town?   @relation(fields: [townId], references: [id])
  townId String?
}

model Area {
  id   String @id @default(cuid())
  name String @unique

  constituency   Constituency? @relation(fields: [constituencyId], references: [id])
  constituencyId String?

  carWashes CarWash[]
}

model Staff {
  id            String  @id @default(cuid())
  name          String?
  email         String? @unique
  image         String?
  staffNo       String? @unique
  phoneNumber   String?
  address       String?
  about         String?
  city          String?
  stateProvince String?
  zipPostalCode String?

  //Created By Who
  createdById String?
  createdBy   User?   @relation(name: "staffCreator", fields: [createdById], references: [id])

  //Staffs Designation
  designationId String
  designation   Designation @relation(fields: [designationId], references: [id])

  //Belongs to Which Car Wash
  carWash   CarWash? @relation(fields: [carWashId], references: [id])
  carWashId String?

  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Service {
  id          String @id @default(cuid())
  name        String
  description String

  carWashService CarWashService[]

  deletedAt      DateTime?
  createdAt      DateTime?        @default(now())
  updatedAt      DateTime?        @updatedAt
  BookingService BookingService[]
}

model CarType {
  id   String @id @default(cuid())
  type String

  booking          Booking[]
  carWashServiceId String?
  carWashService   CarWashService? @relation(fields: [carWashServiceId], references: [id])

  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model CarWashService {
  id        String  @id @default(cuid())
  carWash   CarWash @relation(fields: [carWashId], references: [id])
  carWashId String

  service   Service @relation(fields: [serviceId], references: [id])
  serviceId String

  carTypes CarType[]

  cost   Float // Cost of the service at this car wash
  status Boolean @default(true)

  duration Float?

  bookingAvailability Int @default(0)

  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model CarWash {
  id              String  @id @default(cuid())
  name            String  @unique
  path            String  @unique
  logo            String
  landmark        String?
  lat             Float?
  long            Float?
  branch          String? @default("main")
  bookingLeadTime Float?

  createdById String?
  createdBy   User?   @relation("CarWashCreator", fields: [createdById], references: [id])

  area            Area?            @relation(fields: [areaId], references: [id])
  areaId          String?
  // Define a relationship to users (staff members)
  sysUser         User[]           @relation("userToCarWash")
  staff           Staff[]
  carWashServices CarWashService[]

  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  Booking     Booking[]
  designation Designation[]
}

model BookingService {
  id        String  @id @default(cuid())
  booking   Booking @relation(fields: [bookingId], references: [id])
  bookingId String
  service   Service @relation(fields: [serviceId], references: [id])
  serviceId String
  quantity  Int?    @default(1)

  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}

model Booking {
  id            String   @id @default(cuid())
  customer      Customer @relation(fields: [customerId], references: [id])
  customerId    String
  carWash       CarWash  @relation(fields: [carWashId], references: [id])
  carWashId     String
  carType       CarType  @relation(fields: [carTypeId], references: [id])
  carTypeId     String
  bookingDate   DateTime
  bookingTime   DateTime
  status        Int?     @default(0)
  totalCost     Float?
  paymentStatus Int?     @default(0)

  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  bookingService BookingService[]
}

model Customer {
  id   String @id @default(cuid())
  name String

  email       String    @unique
  phoneNumber String
  bookings    Booking[]

  deletedAt DateTime?
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
}
